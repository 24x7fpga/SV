#+title: Design Verification using SystemVerilog

SystemVerilog builds on top of Verilog, enhancing readability and reusability. It introduces improvements primarily aimed at advanced verification and C language integration. The [[http://ece.uah.edu/~gaede/cpe526/SystemVerilog_3.1a.pdf][SystemVerilog Language Reference Manual (LRM)]] provides a detailed and comprehensive overview of the language's capabilities and enhancements.

* Folder Structure

#+begin_src bash
Projects
.
├── FPGA_Projects
│   └── SV
│       ├── Readme.org
│       ├── sv_tcl_script
│       │   ├── sv_cstrs.tcl
│       │   └── sv_run.tcl
│       ├── sv_templates
│       │   ├── constraints
│       │   └── design
│       └── sv_verification
│   
└── Python_Scripts
    └── sv_scripts
        ├── sv_clean.py
        ├── sv_cstrs_design.py
        ├── sv_cstrs_run.py
        ├── sv_design.py
        └── sv_run.py
#+end_src

* Clone Project 

- Clone the repository =SystemVerilog_Verification= and place it according to the specified folder structure.

#+begin_src bash
git clone https:/https://github.com/24x7fpga/SV.git ~/Projects/FPGA_Projects/
#+end_src

- Clone the =Python_Scripts= repository and place it according to the specified folder structure. While the repository contains various scripts, only the =sv_scripts= folder is required for running verification simulations.

#+begin_src bash
git clone https://github.com/24x7fpga/Python_Scripts.git ~/Projects/
#+end_src

- Add the script location to your =PATH=.

#+begin_src bash
echo 'export PATH=$HOME/Projects/Python_Scripts/sv_scripts:$PATH' >>~/.zshrc
#+end_src

Note: The PATH is a list of directories that your operating system searches through whenever you run a command, helping it locate the necessary executable files. On most Linux distributions, bash is the default shell, but choose the shell that you use.

* Design Directories

- [[https://github.com/24x7fpga/SV/tree/main][sv_verification]]: This repository is dedicated to SystemVerilog-based verification techniques. Concepts such as mailboxes, SV methodology, and testbench automation are demonstrated. Scripts and examples are provided to aid learning and implementation in practical verification scenarios. The repository homepage can be found [[https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/][here]].

- [[https://github.com/24x7fpga/SV/tree/main/sv_verification/cstrs_challenges][cstrs_challenges]]: This repository is focused on mastering SystemVerilog constraints. It includes a collection of challenges and questions designed for practicing and improving constraint-writing skills. Examples and exercises are provided to enhance understanding. The repository homepage can be found [[https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/][here]]

* Verification Basics

- [[https://24x7fpga.com/sv_directory/2024_07_02_00_18_56_associative_arrays/][Associative Arrays]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/][Automatic Task]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_15_18_41_break_and_continue/][Break and Continue]]
- [[https://24x7fpga.com/sv_directory/2024_07_24_16_47_44_class/][Class Example]]
- [[https://24x7fpga.com/sv_directory/2024_10_15_17_48_30_constraint_array_randomization/][Constraint: Array Randomization]]
- [[https://24x7fpga.com/sv_directory/2024_10_16_11_12_51_constraint_bidirectional_and_conditional/][Constraint: Bidirectional and Conditional]]
- [[https://24x7fpga.com/sv_directory/2024_10_22_14_42_44_constraint_weighted_distribution/][Constraint: Weighted Distribution]]
- [[https://24x7fpga.com/sv_directory/2024_10_16_13_50_42_constraint_implication_and_equivalence/][Constraint: Implication and Equivalence]]
- [[https://24x7fpga.com/sv_directory/2024_10_22_16_57_37_constraint_in_line_and_external/][Constraint: In-line and External]]
- [[https://24x7fpga.com/sv_directory/2024_10_15_15_54_33_constraint_inside_operator/][Constraint: Inside Operator]]
- [[https://24x7fpga.com/sv_directory/2024_10_22_13_18_19_constraint_solve_before/][Constraint: Solve-Before]]
- [[https://24x7fpga.com/sv_directory/2024_07_26_09_41_22_shallow_copy_and_deep_copy/][Deep Copy]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_14_21_47_while_and_do_while_loops/][Do while Loop]]
- [[https://24x7fpga.com/sv_directory/2024_07_01_15_56_35_dynamic_arrays/][Dynamic Arrays]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_12_40_49_for_and_foreach_loops/][For Loop]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_12_40_49_for_and_foreach_loops/][Foreach Loop]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_14_46_31_repeat_and_forever/][Forever Example]]
- [[https://24x7fpga.com/sv_directory/2024_07_20_21_47_05_fork_join/][Fork Join]]
- [[https://24x7fpga.com/sv_directory/2024_07_20_21_58_50_fork_join_any/][Fork Join Any]]
- [[https://24x7fpga.com/sv_directory/2024_07_23_17_27_50_disable_fork/][Fork Join Disable]]
- [[https://24x7fpga.com/sv_directory/2024_07_23_17_27_07_wait_fork/][Fork Join Wait]]
- [[https://24x7fpga.com/sv_directory/2024_07_20_15_36_43_functions/][Function Example]]
- [[https://24x7fpga.com/sv_directory/2024_07_29_11_09_50_inheritance/][Inheritance]]
- [[https://24x7fpga.com/sv_directory/2024_07_25_12_36_42_method/][Method Outside Class]]
- [[https://24x7fpga.com/sv_directory/2024_06_29_23_39_49_packed_and_unpacked_array/][Packed and Unpacked Array]]
- [[https://24x7fpga.com/sv_directory/2024_07_31_10_26_49_polymorphism/][Polymorphism]]
- [[https://24x7fpga.com/sv_directory/2024_07_01_23_35_47_queues/][Queue]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_14_46_31_repeat_and_forever/][Repeat Example]]
- [[https://24x7fpga.com/sv_directory/2024_07_26_09_41_22_shallow_copy_and_deep_copy/][Shallow Copy]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/][Static Task]]
- [[https://24x7fpga.com/sv_directory/2024_07_29_12_16_52_super_keyword/][Super Keyword]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/][Task Example]]
- [[https://24x7fpga.com/sv_directory/2024_07_25_14_49_57_this_keyword/][This Keyword]]
- [[https://24x7fpga.com/sv_directory/2024_07_02_15_05_30_enumeration/][Type Enumeration]]
- [[https://24x7fpga.com/sv_directory/2024_07_31_10_21_04_virtual_keyword/][Virtual Keyword]]
- [[https://24x7fpga.com/sv_directory/2024_07_19_14_21_47_while_and_do_while_loops/][While Loop]]

* Basic Examples

- [[https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/half_adder][Half Adder]]
- [[https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/full_adder][Full Adder]]

* Verification Examples

- [[https://github.com/24x7fpga/SV/tree/main/sv_verification/adder_subtractor][Adder Subtractor]]
